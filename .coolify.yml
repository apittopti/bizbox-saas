# Coolify deployment configuration for BizBox Multi-Tenant SaaS Platform
# Target: http://194.164.89.92/

version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: bizbox
      POSTGRES_USER: bizbox_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bizbox-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bizbox_user -d bizbox"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-postgres
      - coolify.type=database

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - bizbox-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-redis
      - coolify.type=cache

  # Database Migration
  migration:
    build:
      context: .
      dockerfile: Dockerfile.migration
    environment:
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: bizbox
      DB_USER: bizbox_user
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bizbox-network
    restart: "no"
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-migration
      - coolify.type=job

  # Landing Page
  landing:
    build:
      context: .
      dockerfile: apps/landing/Dockerfile
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: https://bizbox.yourdomain.com
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-landing
      - coolify.type=application
      - coolify.domains=bizbox.yourdomain.com,www.bizbox.yourdomain.com
      - coolify.https=true
      - coolify.certificate=letsencrypt

  # Admin Application
  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: https://admin.bizbox.yourdomain.com
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-admin
      - coolify.type=application
      - coolify.domains=admin.bizbox.yourdomain.com
      - coolify.https=true
      - coolify.certificate=letsencrypt

  # Builder Application
  builder:
    build:
      context: .
      dockerfile: apps/builder/Dockerfile
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: https://builder.bizbox.yourdomain.com
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-builder
      - coolify.type=application
      - coolify.domains=builder.bizbox.yourdomain.com
      - coolify.https=true
      - coolify.certificate=letsencrypt

  # Customer Application
  customer:
    build:
      context: .
      dockerfile: apps/customer/Dockerfile
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: https://app.bizbox.yourdomain.com
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-customer
      - coolify.type=application
      - coolify.domains=app.bizbox.yourdomain.com
      - coolify.https=true
      - coolify.certificate=letsencrypt

  # Tenant Application (Multi-tenant websites)
  tenant:
    build:
      context: .
      dockerfile: apps/tenant/Dockerfile
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      TENANT_MODE: multi
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-tenant
      - coolify.type=application
      - coolify.domains=*.bizbox.yourdomain.com
      - coolify.https=true
      - coolify.certificate=wildcard

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  bizbox-network:
    driver: bridge

# Coolify deployment settings
x-coolify:
  deployment:
    target: "194.164.89.92"
    project: "bizbox-saas"
    environment: "production"
    
  monitoring:
    enabled: true
    metrics:
      - cpu
      - memory
      - disk
      - network
    alerts:
      - type: email
        threshold: 80
      - type: webhook
        url: ${WEBHOOK_ALERT_URL}
        
  backups:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM
    retention: 30  # Keep 30 days
    targets:
      - postgres_data
      - redis_data
      
  ssl:
    provider: letsencrypt
    email: ${SSL_EMAIL}
    wildcard: true
    domains:
      - bizbox.yourdomain.com
      - "*.bizbox.yourdomain.com"