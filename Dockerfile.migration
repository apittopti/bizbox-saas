# BizBox Platform - Database Migration Container
# Handles database schema migrations and initialization

FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat \
    python3 \
    make \
    g++ \
    curl \
    postgresql-client \
    bash

# Enable pnpm
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable && corepack prepare pnpm@8.0.0 --activate

# Configure pnpm for network resilience
RUN pnpm config set registry https://registry.npmjs.org/ && \
    pnpm config set network-timeout 300000 && \
    pnpm config set fetch-retries 5 && \
    pnpm config set fetch-retry-factor 2 && \
    pnpm config set fetch-retry-mintimeout 10000 && \
    pnpm config set fetch-retry-maxtimeout 60000

WORKDIR /app

# =============================================================================
# DEPENDENCIES STAGE
# =============================================================================
FROM base AS dependencies

# Copy workspace configuration
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./

# Copy package.json files for workspace structure
COPY packages/ ./packages/
COPY apps/ ./apps/

# Remove source files, keep only package.json
RUN find packages apps -type f ! -name "package.json" -delete
RUN find packages apps -type d -empty -delete

# Install only database-related dependencies with retry logic
RUN --mount=type=cache,id=pnpm,target=/pnpm/store \
    for i in 1 2 3 4 5; do \
        echo "Dependencies installation attempt $i..." && \
        pnpm install --frozen-lockfile --filter=@bizbox/core-database --filter=@bizbox/core-database^... && break || \
        (echo "Attempt $i failed, retrying in 10 seconds..." && sleep 10); \
    done

# =============================================================================
# MIGRATION STAGE
# =============================================================================
FROM dependencies AS migration

# Copy database-related source code
COPY packages/core/database ./packages/core/database/
COPY packages/shared/types ./packages/shared/types/

# Create migration script
RUN cat > /app/migrate.sh << 'EOF'
#!/bin/bash
set -e

echo "Starting database migration process..."

# Wait for database to be ready
echo "Waiting for database connection..."
until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME; do
    echo "Database is unavailable - sleeping"
    sleep 2
done

echo "Database is ready!"

# Run migrations
echo "Running database migrations..."
cd /app/packages/core/database

# Check if migration tool exists and run it
if [ -f "migrate.js" ]; then
    node migrate.js
elif [ -f "prisma/schema.prisma" ]; then
    pnpm prisma migrate deploy
elif [ -d "migrations" ]; then
    # Run SQL migrations directly
    for migration in migrations/*.sql; do
        if [ -f "$migration" ]; then
            echo "Running migration: $migration"
            psql $DATABASE_URL -f "$migration"
        fi
    done
else
    echo "No migration strategy found, running database setup..."
    # Create basic tables if they don't exist
    psql $DATABASE_URL -c "
        CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
        CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";
        
        -- Basic tables will be created by the application
        SELECT 1;
    "
fi

echo "Database migration completed successfully!"
EOF

RUN chmod +x /app/migrate.sh

# =============================================================================
# RUNTIME STAGE
# =============================================================================
FROM base AS runtime

# Copy migration files and scripts
COPY --from=migration /app/packages/core/database ./packages/core/database/
COPY --from=migration /app/migrate.sh ./migrate.sh
COPY --from=migration /app/node_modules ./node_modules/

# Set environment variables
ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME || exit 1

# Run migrations
CMD ["./migrate.sh"]