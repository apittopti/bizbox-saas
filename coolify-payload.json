{
  "name": "bizbox-saas-github",
  "description": "BizBox Multi-Tenant SaaS Platform from GitHub",
  "project_uuid": "uowskkkgo40gksw8gos88cks",
  "server_uuid": "f8scksookwokkwwsowgg8okg",
  "environment_uuid": "iccwk0o84g0ck8gc8kw80w4k",
  "docker_compose_raw": "dmVyc2lvbjogIjMuOCINCg0Kc2VydmljZXM6DQogICMgUG9zdGdyZVNRTCBEYXRhYmFzZQ0KICBwb3N0Z3JlczoNCiAgICBpbWFnZTogcG9zdGdyZXM6MTYtYWxwaW5lDQogICAgcmVzdGFydDogdW5sZXNzLXN0b3BwZWQNCiAgICBlbnZpcm9ubWVudDoNCiAgICAgIFBPU1RHUkVTX0RCOiBiaXpib3gNCiAgICAgIFBPU1RHUkVTX1VTRVI6IGJpemJveF91c2VyDQogICAgICBQT1NUR1JFU19QQVNTV09SRDogJHtEQl9QQVNTV09SRH0NCiAgICAgIFBPU1RHUkVTX0lOSVREQl9BUkdTOiAiLS1hdXRoLWhvc3Q9c2NyYW0tc2hhLTI1NiINCiAgICB2b2x1bWVzOg0KICAgICAgLSBwb3N0Z3Jlc19kYXRhOi92YXIvbGliL3Bvc3RncmVzcWwvZGF0YQ0KICAgIG5ldHdvcmtzOg0KICAgICAgLSBiaXpib3gtbmV0d29yaw0KICAgIGhlYWx0aGNoZWNrOg0KICAgICAgdGVzdDogWyJDTUQtU0hFTEwiLCAicGdfaXNyZWFkeSAtVSBiaXpib3hfdXNlciAtZCBiaXpib3giXQ0KICAgICAgaW50ZXJ2YWw6IDMwcw0KICAgICAgdGltZW91dDogMTBzDQogICAgICByZXRyaWVzOiA1DQogICAgICBzdGFydF9wZXJpb2Q6IDYwcw0KICAgIGxhYmVsczoNCiAgICAgIC0gY29vbGlmeS5tYW5hZ2VkPXRydWUNCiAgICAgIC0gY29vbGlmeS5uYW1lPWJpemJveC1wb3N0Z3Jlcw0KICAgICAgLSBjb29saWZ5LnR5cGU9ZGF0YWJhc2UNCg0KICAjIFJlZGlzIENhY2hlDQogIHJlZGlzOg0KICAgIGltYWdlOiByZWRpczo3LWFscGluZQ0KICAgIHJlc3RhcnQ6IHVubGVzcy1zdG9wcGVkDQogICAgY29tbWFuZDogPg0KICAgICAgcmVkaXMtc2VydmVyDQogICAgICAtLXJlcXVpcmVwYXNzICR7UkVESVNfUEFTU1dPUkR9DQogICAgICAtLWFwcGVuZG9ubHkgeWVzDQogICAgICAtLWFwcGVuZGZzeW5jIGV2ZXJ5c2VjDQogICAgICAtLW1heG1lbW9yeSAyNTZtYg0KICAgICAgLS1tYXhtZW1vcnktcG9saWN5IGFsbGtleXMtbHJ1DQogICAgdm9sdW1lczoNCiAgICAgIC0gcmVkaXNfZGF0YTovZGF0YQ0KICAgIG5ldHdvcmtzOg0KICAgICAgLSBiaXpib3gtbmV0d29yaw0KICAgIGhlYWx0aGNoZWNrOg0KICAgICAgdGVzdDogWyJDTUQiLCAicmVkaXMtY2xpIiwgIi0tcmF3IiwgImluY3IiLCAicGluZyJdDQogICAgICBpbnRlcnZhbDogMzBzDQogICAgICB0aW1lb3V0OiAxMHMNCiAgICAgIHJldHJpZXM6IDUNCiAgICAgIHN0YXJ0X3BlcmlvZDogMzBzDQogICAgbGFiZWxzOg0KICAgICAgLSBjb29saWZ5Lm1hbmFnZWQ9dHJ1ZQ0KICAgICAgLSBjb29saWZ5Lm5hbWU9Yml6Ym94LXJlZGlzDQogICAgICAtIGNvb2xpZnkudHlwZT1jYWNoZQ0KDQogICMgRGF0YWJhc2UgTWlncmF0aW9uDQogIG1pZ3JhdGlvbjoNCiAgICBpbWFnZTogcG9zdGdyZXM6MTYtYWxwaW5lDQogICAgZW52aXJvbm1lbnQ6DQogICAgICBQR1VTRVI6IGJpemJveF91c2VyDQogICAgICBQR1BBU1NXT1JEOiAke0RCX1BBU1NXT1JEfQ0KICAgICAgUEdIT1NUOiBwb3N0Z3Jlcw0KICAgICAgUEdEQVRBQkFTRTogYml6Ym94DQogICAgY29tbWFuZDogPg0KICAgICAgc2ggLWMgIg0KICAgICAgICBlY2hvICdXYWl0aW5nIGZvciBQb3N0Z3JlU1FMLi4uJyAmJg0KICAgICAgICB1bnRpbCBwZ19pc3JlYWR5IC1oIHBvc3RncmVzIC1VIGJpemJveF91c2VyIC1kIGJpemJveDsgZG8gc2xlZXAgMjsgZG9uZSAmJg0KICAgICAgICBlY2hvICdSdW5uaW5nIG1pZ3JhdGlvbnMuLi4nICYmDQogICAgICAgIHBzcWwgLWggcG9zdGdyZXMgLVUgYml6Ym94X3VzZXIgLWQgYml6Ym94IC1jIFwiDQogICAgICAgICAgQ1JFQVRFIEVYVEVOU0lPTiBJRiBOT1QgRVhJU1RTIHV1aWRfb3NzcDsNCiAgICAgICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyB1c2VycyAoaWQgVVVJRCBQUklNQVJZIEtFWSBERUZBVUxUIHV1aWRfZ2VuZXJhdGVfdjQoKSwgZW1haWwgVkFSQ0hBUigyNTUpIFVOSVFVRSBOT1QgTlVMTCwgbmFtZSBWQVJDSEFSKDI1NSksIHJvbGUgVkFSQ0hBUig1MCkgREVGQVVMVCAndXNlcicsIGNyZWF0ZWRfYXQgVElNRVNUQU1QIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVApOw0KICAgICAgICAgIENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHRlbmFudHMgKGlkIFVVSUQgUFJJTUFSWSBLRVkgREVGQVVMVCB1dWlkX2dlbmVyYXRlX3Y0KCksIG5hbWUgVkFSQ0hBUigyNTUpIE5PVCBOVUxMLCBzdWJkb21haW4gVkFSQ0hBUigxMDApIFVOSVFVRSBOT1QgTlVMTCwgb3duZXJfaWQgVVVJRCBSRUZFUkVOQ0VTIHVzZXJzKGlkKSwgc2V0dGluZ3MgSlNPTkIgREVGQVVMVCAne30nLCBjcmVhdGVkX2F0IFRJTUVTVEFNUCBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QKTsNCiAgICAgICAgICBJTlNFUlQgSU5UTyB1c2VycyAoZW1haWwsIG5hbWUsIHJvbGUpIFZBTFVFUyAoJ2FkbWluQGJpemJveC5sb2NhbCcsICdTdXBlciBBZG1pbicsICdzdXBlcl9hZG1pbicpIE9OIENPTkZMSUNUIERPIE5PVEhJTkc7DQogICAgICAgIFwiICYmDQogICAgICAgIGVjaG8gJ01pZ3JhdGlvbiBjb21wbGV0ZWQhJw0KICAgICAgIg0KICAgIGRlcGVuZHNfb246DQogICAgICBwb3N0Z3JlczoNCiAgICAgICAgY29uZGl0aW9uOiBzZXJ2aWNlX2hlYWx0aHkNCiAgICBuZXR3b3JrczoNCiAgICAgIC0gYml6Ym94LW5ldHdvcmsNCiAgICByZXN0YXJ0OiAibm8iDQoNCiAgIyBMYW5kaW5nIFBhZ2UNCiAgbGFuZGluZzoNCiAgICBpbWFnZTogbmdpbng6YWxwaW5lDQogICAgcmVzdGFydDogdW5sZXNzLXN0b3BwZWQNCiAgICBwb3J0czoNCiAgICAgIC0gIjMwMDE6ODAiDQogICAgdm9sdW1lczoNCiAgICAgIC0gbGFuZGluZ19odG1sOi91c3Ivc2hhcmUvbmdpbngvaHRtbA0KICAgIG5ldHdvcmtzOg0KICAgICAgLSBiaXpib3gtbmV0d29yaw0KICAgIGRlcGVuZHNfb246DQogICAgICAtIG1pZ3JhdGlvbg0KICAgIGNvbW1hbmQ6ID4NCiAgICAgIHNoIC1jICINCiAgICAgICAgZWNobyAnPCFET0NUWVBFIGh0bWw+DQogICAgICAgIDxodG1sPjxoZWFkPjx0aXRsZT5CaXpCb3ggLSBMYW5kaW5nPC90aXRsZT4NCiAgICAgICAgPHN0eWxlPmJvZHl7Zm9udC1mYW1pbHk6QXJpYWwsc2Fucy1zZXJpZjttYXJnaW46MDtwYWRkaW5nOjQwcHg7YmFja2dyb3VuZDojZjVmNWY1O30NCiAgICAgICAgLmNvbnRhaW5lcnttYXgtd2lkdGg6ODAwcHg7bWFyZ2luOjAgYXV0bztiYWNrZ3JvdW5kOndoaXRlO3BhZGRpbmc6NDBweDtib3JkZXItcmFkaXVzOjEwcHg7Ym94LXNoYWRvdzowIDJweCAyMHB4IHJnYmEoMCwwLDAsMC4xKTt9DQogICAgICAgIGgxe2NvbG9yOiMzMzM7dGV4dC1hbGlnbjpjZW50ZXI7bWFyZ2luLWJvdHRvbTozMHB4O30NCiAgICAgICAgLmxpbmtze2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6cmVwZWF0KGF1dG8tZml0LG1pbm1heCgyMDBweCwxZnIpKTtnYXA6MTVweDttYXJnaW4tdG9wOjMwcHg7fQ0KICAgICAgICAubGlua3tiYWNrZ3JvdW5kOiMwMDdhY2M7Y29sb3I6d2hpdGU7cGFkZGluZzoxNXB4O3RleHQtZGVjb3JhdGlvbjpub25lO2JvcmRlci1yYWRpdXM6NXB4O3RleHQtYWxpZ246Y2VudGVyO30NCiAgICAgICAgPC9zdHlsZT48L2hlYWQ+PGJvZHk+DQogICAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj4NCiAgICAgICAgPGgxPvCfmoAgQml6Qm94IE11bHRpLVRlbmFudCBTYWFTIFBsYXRmb3JtPC9oMT4NCiAgICAgICAgPHA+4pyFIExhbmRpbmcgcGFnZSBydW5uaW5nIG9uIHBvcnQgMzAwMTwvcD4NCiAgICAgICAgPGRpdiBjbGFzcz1cImxpbmtzXCI+DQogICAgICAgIDxhIGhyZWY9XCJodHRwOi8vMTk0LjE2NC44OS45MjozMDAyXCIgY2xhc3M9XCJsaW5rXCI+QWRtaW4gRGFzaGJvYXJkPC9hPg0KICAgICAgICA8YSBocmVmPVwiaHR0cDovLzE5NC4xNjQuODkuOTI6MzAwM1wiIGNsYXNzPVwibGlua1wiPldlYnNpdGUgQnVpbGRlcjwvYT4NCiAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly8xOTQuMTY0Ljg5LjkyOjMwMDRcIiBjbGFzcz1cImxpbmtcIj5DdXN0b21lciBQb3J0YWw8L2E+DQogICAgICAgIDxhIGhyZWY9XCJodHRwOi8vMTk0LjE2NC44OS45MjozMDA1XCIgY2xhc3M9XCJsaW5rXCI+VGVuYW50IFNpdGVzPC9hPg0KICAgICAgICA8YSBocmVmPVwiaHR0cDovLzE5NC4xNjQuODkuOTI6MzAwNlwiIGNsYXNzPVwibGlua1wiPlN1cGVyIEFkbWluPC9hPg0KICAgICAgICA8L2Rpdj48L2Rpdj48L2JvZHk+PC9odG1sPicgPiAvdXNyL3NoYXJlL25naW54L2h0bWwvaW5kZXguaHRtbCAmJg0KICAgICAgICBuZ2lueCAtZyAnZGFlbW9uIG9mZjsnDQogICAgICAiDQoNCiAgIyBBZG1pbiBEYXNoYm9hcmQNCiAgYWRtaW46DQogICAgaW1hZ2U6IG5naW54OmFscGluZQ0KICAgIHJlc3RhcnQ6IHVubGVzcy1zdG9wcGVkDQogICAgcG9ydHM6DQogICAgICAtICIzMDAyOjgwIg0KICAgIG5ldHdvcmtzOg0KICAgICAgLSBiaXpib3gtbmV0d29yaw0KICAgIGRlcGVuZHNfb246DQogICAgICAtIG1pZ3JhdGlvbg0KICAgIGNvbW1hbmQ6ID4NCiAgICAgIHNoIC1jICINCiAgICAgICAgZWNobyAnPCFET0NUWVBFIGh0bWw+DQogICAgICAgIDxodG1sPjxoZWFkPjx0aXRsZT5CaXpCb3ggLSBBZG1pbiBEYXNoYm9hcmQ8L3RpdGxlPg0KICAgICAgICA8c3R5bGU+Ym9keXtmb250LWZhbWlseTpBcmlhbCxzYW5zLXNlcmlmO21hcmdpbjowO3BhZGRpbmc6NDBweDtiYWNrZ3JvdW5kOiNmOGY5ZmE7fQ0KICAgICAgICAuY29udGFpbmVye21heC13aWR0aDoxMjAwcHg7bWFyZ2luOjAgYXV0bztiYWNrZ3JvdW5kOndoaXRlO3BhZGRpbmc6NDBweDtib3JkZXItcmFkaXVzOjEwcHg7Ym94LXNoYWRvdzowIDJweCAyMHB4IHJnYmEoMCwwLDAsMC4xKTt9DQogICAgICAgIGgxe2NvbG9yOiMzMzM7dGV4dC1hbGlnbjpjZW50ZXI7bWFyZ2luLWJvdHRvbTozMHB4O30NCiAgICAgICAgLnN0YXR1c3tiYWNrZ3JvdW5kOiNkNGVkZGE7cGFkZGluZzoyMHB4O2JvcmRlci1yYWRpdXM6NXB4O21hcmdpbjoyMHB4IDA7Ym9yZGVyOjFweCBzb2xpZCAjYzNlNmNiO30NCiAgICAgICAgLmZlYXR1cmVze2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6cmVwZWF0KGF1dG8tZml0LG1pbm1heCgyNTBweCwxZnIpKTtnYXA6MjBweDttYXJnaW4tdG9wOjMwcHg7fQ0KICAgICAgICAuZmVhdHVyZXtiYWNrZ3JvdW5kOiNmOGY5ZmE7cGFkZGluZzoyMHB4O2JvcmRlci1yYWRpdXM6NXB4O2JvcmRlcjoxcHggc29saWQgI2RlZTJlNjt9DQogICAgICAgIDwvc3R5bGU+PC9oZWFkPjxib2R5Pg0KICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+DQogICAgICAgIDxoMT7wn5ug77iPIEFkbWluIERhc2hib2FyZDwvaDE+DQogICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0dXNcIj7inIUgQWRtaW4gaW50ZXJmYWNlIHJ1bm5pbmcgb24gcG9ydCAzMDAyPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9XCJmZWF0dXJlc1wiPg0KICAgICAgICA8ZGl2IGNsYXNzPVwiZmVhdHVyZVwiPjxoMz5UZW5hbnQgTWFuYWdlbWVudDwvaDM+PHA+TWFuYWdlIGN1c3RvbWVyIHRlbmFudHMgYW5kIHN1YnNjcmlwdGlvbnM8L3A+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9XCJmZWF0dXJlXCI+PGgzPlVzZXIgQWRtaW5pc3RyYXRpb248L2gzPjxwPkNvbnRyb2wgdXNlciBhY2Nlc3MgYW5kIHBlcm1pc3Npb25zPC9wPjwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPVwiZmVhdHVyZVwiPjxoMz5BbmFseXRpY3M8L2gzPjxwPlZpZXcgcGxhdGZvcm0gdXNhZ2Ugc3RhdGlzdGljczwvcD48L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz1cImZlYXR1cmVcIj48aDM+QmlsbGluZzwvaDM+PHA+SGFuZGxlIHBheW1lbnRzIGFuZCBpbnZvaWNpbmc8L3A+PC9kaXY+DQogICAgICAgIDwvZGl2PjwvZGl2PjwvYm9keT48L2h0bWw+JyA+IC91c3Ivc2hhcmUvbmdpbngvaHRtbC9pbmRleC5odG1sICYmDQogICAgICAgIG5naW54IC1nICdkYWVtb24gb2ZmOycNCiAgICAgICINCg0KICAjIFdlYnNpdGUgQnVpbGRlcg0KICBidWlsZGVyOg0KICAgIGltYWdlOiBuZ2lueDphbHBpbmUNCiAgICByZXN0YXJ0OiB1bmxlc3Mtc3RvcHBlZA0KICAgIHBvcnRzOg0KICAgICAgLSAiMzAwMzo4MCINCiAgICBuZXR3b3JrczoNCiAgICAgIC0gYml6Ym94LW5ldHdvcmsNCiAgICBkZXBlbmRzX29uOg0KICAgICAgLSBtaWdyYXRpb24NCiAgICBjb21tYW5kOiA+DQogICAgICBzaCAtYyAiDQogICAgICAgIGVjaG8gJzwhRE9DVFlQRSBodG1sPg0KICAgICAgICA8aHRtbD48aGVhZD48dGl0bGU+Qml6Qm94IC0gV2Vic2l0ZSBCdWlsZGVyPC90aXRsZT4NCiAgICAgICAgPHN0eWxlPmJvZHl7Zm9udC1mYW1pbHk6QXJpYWwsc2Fucy1zZXJpZjttYXJnaW46MDtwYWRkaW5nOjQwcHg7YmFja2dyb3VuZDojZTNmMmZkO30NCiAgICAgICAgLmNvbnRhaW5lcnttYXgtd2lkdGg6MTIwMHB4O21hcmdpbjowIGF1dG87YmFja2dyb3VuZDp3aGl0ZTtwYWRkaW5nOjQwcHg7Ym9yZGVyLXJhZGl1czoxMHB4O2JveC1zaGFkb3c6MCAycHggMjBweCByZ2JhKDAsMCwwLDAuMSk7fQ0KICAgICAgICBoMXtjb2xvcjojMzMzO3RleHQtYWxpZ246Y2VudGVyO21hcmdpbi1ib3R0b206MzBweDt9DQogICAgICAgIC5idWlsZGVye2JhY2tncm91bmQ6I2YxZjhlOTtwYWRkaW5nOjMwcHg7Ym9yZGVyLXJhZGl1czoxMHB4O21hcmdpbjoyMHB4IDA7Ym9yZGVyOjJweCBkYXNoZWQgIzgxYzc4NDt9DQogICAgICAgIC50b29sc3tkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdChhdXRvLWZpdCxtaW5tYXgoMjAwcHgsMWZyKSk7Z2FwOjE1cHg7bWFyZ2luLXRvcDoyMHB4O30NCiAgICAgICAgLnRvb2x7YmFja2dyb3VuZDojMjE5NmYzO2NvbG9yOndoaXRlO3BhZGRpbmc6MTVweDtib3JkZXItcmFkaXVzOjVweDt0ZXh0LWFsaWduOmNlbnRlcjt9DQogICAgICAgIDwvc3R5bGU+PC9oZWFkPjxib2R5Pg0KICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+DQogICAgICAgIDxoMT7wn46oIFdlYnNpdGUgQnVpbGRlcjwvaDE+DQogICAgICAgIDxkaXYgY2xhc3M9XCJidWlsZGVyXCI+4pyFIERyYWctYW5kLWRyb3Agd2Vic2l0ZSBidWlsZGVyIHJ1bm5pbmcgb24gcG9ydCAzMDAzPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9XCJ0b29sc1wiPg0KICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbFwiPlRleHQgRWRpdG9yPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9XCJ0b29sXCI+SW1hZ2UgR2FsbGVyeTwvZGl2Bg0KICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbFwiPkZvcm0gQnVpbGRlcjwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbFwiPlRlbXBsYXRlIExpYnJhcnk8L2Rpdj4NCiAgICAgICAgPC9kaXY+PC9kaXY+PC9ib2R5PjwvaHRtbD4nID4gL3Vzci9zaGFyZS9uZ2lueC9odG1sL2luZGV4Lmh0bWwgJiYNCiAgICAgICAgbmdpbnggLWcgJ2RhZW1vbiBvZmY7Jw0KICAgICAgIg0KDQogICMgQ3VzdG9tZXIgUG9ydGFsDQogIGN1c3RvbWVyOg0KICAgIGltYWdlOiBuZ2lueDphbHBpbmUNCiAgICByZXN0YXJ0OiB1bmxlc3Mtc3RvcHBlZA0KICAgIHBvcnRzOg0KICAgICAgLSAiMzAwNDo4MCINCiAgICBuZXR3b3JrczoNCiAgICAgIC0gYml6Ym94LW5ldHdvcmsNCiAgICBkZXBlbmRzX29uOg0KICAgICAgLSBtaWdyYXRpb24NCiAgICBjb21tYW5kOiA+DQogICAgICBzaCAtYyAiDQogICAgICAgIGVjaG8gJzwhRE9DVFlQRSBodG1sPg0KICAgICAgICA8aHRtbD48aGVhZD48dGl0bGU+Qml6Qm94IC0gQ3VzdG9tZXIgUG9ydGFsPC90aXRsZT4NCiAgICAgICAgPHN0eWxlPmJvZHl7Zm9udC1mYW1pbHk6QXJpYWwsc2Fucy1zZXJpZjttYXJnaW46MDtwYWRkaW5nOjQwcHg7YmFja2dyb3VuZDojZmNlNGVjO30NCiAgICAgICAgLmNvbnRhaW5lcnttYXgtd2lkdGg6MTAwMHB4O21hcmdpbjowIGF1dG87YmFja2dyb3VuZDp3aGl0ZTtwYWRkaW5nOjQwcHg7Ym9yZGVyLXJhZGl1czoxMHB4O2JveC1zaGFkb3c6MCAycHggMjBweCByZ2JhKDAsMCwwLDAuMSk7fQ0KICAgICAgICBoMXtjb2xvcjojMzMzO3RleHQtYWxpZ246Y2VudGVyO21hcmdpbi1ib3R0b206MzBweDt9DQogICAgICAgIC5wb3J0YWx7YmFja2dyb3VuZDojZmZmM2UwO3BhZGRpbmc6MzBweDtib3JkZXItcmFkaXVzOjEwcHg7bWFyZ2luOjIwcHggMDt9DQogICAgICAgIC5zZWN0aW9uc3tkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdChhdXRvLWZpdCxtaW5tYXgoMjAwcHgsMWZyKSk7Z2FwOjE1cHg7bWFyZ2luLXRvcDoyMHB4O30NCiAgICAgICAgLnNlY3Rpb257YmFja2dyb3VuZDojZmY5ODAwO2NvbG9yOndoaXRlO3BhZGRpbmc6MTVweDtib3JkZXItcmFkaXVzOjVweDt0ZXh0LWFsaWduOmNlbnRlcjt9DQogICAgICAgIDwvc3R5bGU+PC9oZWFkPjxib2R5Pg0KICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+DQogICAgICAgIDxoMT7wn5GkIEN1c3RvbWVyIFBvcnRhbDwvaDE+DQogICAgICAgIDxkaXYgY2xhc3M9XCJwb3J0YWxcIj7inIUgQ3VzdG9tZXIgbWFuYWdlbWVudCBwb3J0YWwgcnVubmluZyBvbiBwb3J0IDMwMDQ8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz1cInNlY3Rpb25zXCI+DQogICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uXCI+TXkgQWNjb3VudDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPVwic2VjdGlvblwiPkJpbGxpbmc8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz1cInNlY3Rpb25cIj5TdXBwb3J0PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uXCI+U2V0dGluZ3M8L2Rpdj4NCiAgICAgICAgPC9kaXY+PC9kaXY+PC9ib2R5PjwvaHRtbD4nID4gL3Vzci9zaGFyZS9uZ2lueC9odG1sL2luZGV4Lmh0bWwgJiYNCiAgICAgICAgbmdpbnggLWcgJ2RhZW1vbiBvZmY7Jw0KICAgICAgIg0KDQogICMgVGVuYW50IFNpdGVzDQogIHRlbmFudDoNCiAgICBpbWFnZTogbmdpbng6YWxwaW5lDQogICAgcmVzdGFydDogdW5sZXNzLXN0b3BwZWQNCiAgICBwb3J0czoNCiAgICAgIC0gIjMwMDU6ODAiDQogICAgbmV0d29ya3M6DQogICAgICAtIGJpemJveC1uZXR3b3JrDQogICAgZGVwZW5kc19vbjoNCiAgICAgIC0gbWlncmF0aW9uDQogICAgY29tbWFuZDogPg0KICAgICAgc2ggLWMgIg0KICAgICAgICBlY2hvICc8IURPQ1RZUEUgaHRtbD4NCiAgICAgICAgPGh0bWw+PGhlYWQ+PHRpdGxlPkJpekJveCAtIFRlbmFudCBTaXRlczwvdGl0bGU+DQogICAgICAgIDxzdHlsZT5ib2R5e2ZvbnQtZmFtaWx5OkFyaWFsLHNhbnMtc2VyaWY7bWFyZ2luOjA7cGFkZGluZzo0MHB4O2JhY2tncm91bmQ6I2U4ZjVlODt9DQogICAgICAgIC5jb250YWluZXJ7bWF4LXdpZHRoOjEwMDBweDttYXJnaW46MCBhdXRvO2JhY2tncm91bmQ6d2hpdGU7cGFkZGluZzo0MHB4O2JvcmRlci1yYWRpdXM6MTBweDtib3gtc2hhZG93OjAgMnB4IDIwcHggcmdiYSgwLDAsMCwwLjEpO30NCiAgICAgICAgaDF7Y29sb3I6IzMzMzt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW4tYm90dG9tOjMwcHg7fQ0KICAgICAgICAudGVuYW50e2JhY2tncm91bmQ6I2M4ZTZjOTtwYWRkaW5nOjMwcHg7Ym9yZGVyLXJhZGl1czoxMHB4O21hcmdpbjoyMHB4IDA7fQ0KICAgICAgICA8L3N0eWxlPjwvaGVhZD48Ym9keT4NCiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPg0KICAgICAgICA8aDE+8J+PoiBUZW5hbnQgU2l0ZXMgUmVuZGVyZXI8L2gxPg0KICAgICAgICA8ZGl2IGNsYXNzPVwidGVuYW50XCI+4pyFIE11bHRpLXRlbmFudCB3ZWJzaXRlIHJlbmRlcmVyIHJ1bm5pbmcgb24gcG9ydCAzMDA1PC9kaXY+DQogICAgICAgIDxwPlRoaXMgc2VydmljZSBkeW5hbWljYWxseSBzZXJ2ZXMgdGVuYW50LXNwZWNpZmljIHdlYnNpdGVzIGJhc2VkIG9uIHN1YmRvbWFpbiByb3V0aW5nLjwvcD4NCiAgICAgICAgPC9kaXY+PC9ib2R5PjwvaHRtbD4nID4gL3Vzci9zaGFyZS9uZ2lueC9odG1sL2luZGV4Lmh0bWwgJiYNCiAgICAgICAgbmdpbnggLWcgJ2RhZW1vbiBvZmY7Jw0KICAgICAgIg0KDQogICMgU3VwZXIgQWRtaW4NCiAgc3VwZXItYWRtaW46DQogICAgaW1hZ2U6IG5naW54OmFscGluZQ0KICAgIHJlc3RhcnQ6IHVubGVzcy1zdG9wcGVkDQogICAgcG9ydHM6DQogICAgICAtICIzMDA2OjgwIg0KICAgIG5ldHdvcmtzOg0KICAgICAgLSBiaXpib3gtbmV0d29yaw0KICAgIGRlcGVuZHNfb246DQogICAgICAtIG1pZ3JhdGlvbg0KICAgIGNvbW1hbmQ6ID4NCiAgICAgIHNoIC1jICINCiAgICAgICAgZWNobyAnPCFET0NUWVBFIGh0bWw+DQogICAgICAgIDxodG1sPjxoZWFkPjx0aXRsZT5CaXpCb3ggLSBTdXBlciBBZG1pbjwvdGl0bGU+DQogICAgICAgIDxzdHlsZT5ib2R5e2ZvbnQtZmFtaWx5OkFyaWFsLHNhbnMtc2VyaWY7bWFyZ2luOjA7cGFkZGluZzo0MHB4O2JhY2tncm91bmQ6I2ZmZWJlZTt9DQogICAgICAgIC5jb250YWluZXJ7bWF4LXdpZHRoOjEyMDBweDttYXJnaW46MCBhdXRvO2JhY2tncm91bmQ6d2hpdGU7cGFkZGluZzo0MHB4O2JvcmRlci1yYWRpdXM6MTBweDtib3gtc2hhZG93OjAgMnB4IDIwcHggcmdiYSgwLDAsMCwwLjEpO30NCiAgICAgICAgaDF7Y29sb3I6I2QzMmYyZjt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW4tYm90dG9tOjMwcHg7fQ0KICAgICAgICAuYWRtaW57YmFja2dyb3VuZDojZmZjZGQyO3BhZGRpbmc6MzBweDtib3JkZXItcmFkaXVzOjEwcHg7bWFyZ2luOjIwcHggMDtib3JkZXI6MnB4IHNvbGlkICNmNDQzMzY7fQ0KICAgICAgICAuY29udHJvbHN7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoYXV0by1maXQsbWlubWF4KDIwMHB4LDFmcikpO2dhcDoxNXB4O21hcmdpbi10b3A6MjBweDt9DQogICAgICAgIC5jb250cm9se2JhY2tncm91bmQ6I2Y0NDMzNjtjb2xvcjp3aGl0ZTtwYWRkaW5nOjE1cHg7Ym9yZGVyLXJhZGl1czo1cHg7dGV4dC1hbGlnbjpjZW50ZXI7fQ0KICAgICAgICA8L3N0eWxlPjwvaGVhZD48Ym9keT4NCiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPg0KICAgICAgICA8aDE+4pqhIFN1cGVyIEFkbWluIFBhbmVsPC9oMT4NCiAgICAgICAgPGRpdiBjbGFzcz1cImFkbWluXCI+4pyFIFN1cGVyIGFkbWluIGludGVyZmFjZSBydW5uaW5nIG9uIHBvcnQgMzAwNjxicj4NCiAgICAgICAgTG9naW46IGFkbWluQGJpemJveC5sb2NhbCB8IFBhc3N3b3JkOiAke1NVUEVSX0FETUlOX1BBU1NXT1JEfTwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHNcIj4NCiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xcIj5QbGF0Zm9ybSBTZXR0aW5nczwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbFwiPlN5c3RlbSBNb25pdG9yPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sXCI+RGF0YWJhc2UgQWRtaW48L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xcIj5Vc2VyIE1hbmFnZW1lbnQ8L2Rpdj4NCiAgICAgICAgPC9kaXY+PC9kaXY+PC9ib2R5PjwvaHRtbD4nID4gL3Vzci9zaGFyZS9uZ2lueC9odG1sL2luZGV4Lmh0bWwgJiYNCiAgICAgICAgbmdpbnggLWcgJ2RhZW1vbiBvZmY7Jw0KICAgICAgIg0KICAgIGVudmlyb25tZW50Og0KICAgICAgU1VQRVJfQURNSU5fUEFTU1dPUkQ6ICR7U1VQRVJfQURNSU5fUEFTU1dPUkR9DQoNCnZvbHVtZXM6DQogIHBvc3RncmVzX2RhdGE6DQogICAgZHJpdmVyOiBsb2NhbA0KICByZWRpc19kYXRhOg0KICAgIGRyaXZlcjogbG9jYWwNCiAgbGFuZGluZ19odG1sOg0KICAgIGRyaXZlcjogbG9jYWwNCg0KbmV0d29ya3M6DQogIGJpemJveC1uZXR3b3JrOg0KICAgIGRyaXZlcjogYnJpZGdlDQogICAgaXBhbToNCiAgICAgIGRyaXZlcjogZGVmYXVsdA0KICAgICAgY29uZmlnOg0KICAgICAgICAtIHN1Ym5ldDogMTcyLjIwLjAuMC8xNg=="
}