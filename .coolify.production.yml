# BizBox Multi-Tenant SaaS Platform - Coolify Production Deployment
# Target: http://194.164.89.92/
# Using nip.io for automatic domain resolution without DNS setup

version: "3.8"

services:
  # PostgreSQL Database with optimized configuration
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: bizbox
      POSTGRES_USER: bizbox_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/core/database/setup-database.sql:/docker-entrypoint-initdb.d/01-setup.sql
    networks:
      - bizbox-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bizbox_user -d bizbox"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-postgres
      - coolify.type=database

  # Redis Cache with persistence
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - bizbox-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-redis
      - coolify.type=cache

  # Database Migration Job (using postgres image with migration script)
  migration:
    image: postgres:16-alpine
    environment:
      PGUSER: bizbox_user
      PGPASSWORD: ${DB_PASSWORD}
      PGHOST: postgres
      PGDATABASE: bizbox
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        until pg_isready -h postgres -U bizbox_user -d bizbox; do
          echo 'Waiting for database...'
          sleep 2
        done &&
        echo 'Database is ready, running migrations...' &&
        psql -h postgres -U bizbox_user -d bizbox -c \"
          CREATE EXTENSION IF NOT EXISTS uuid_ossp;
          CREATE TABLE IF NOT EXISTS users (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            email VARCHAR(255) UNIQUE NOT NULL,
            password_hash VARCHAR(255),
            name VARCHAR(255),
            role VARCHAR(50) DEFAULT 'user',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          CREATE TABLE IF NOT EXISTS tenants (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            name VARCHAR(255) NOT NULL,
            subdomain VARCHAR(100) UNIQUE NOT NULL,
            owner_id UUID REFERENCES users(id),
            settings JSONB DEFAULT '{}',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          CREATE TABLE IF NOT EXISTS pages (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
            title VARCHAR(255) NOT NULL,
            slug VARCHAR(255) NOT NULL,
            content JSONB DEFAULT '{}',
            published BOOLEAN DEFAULT false,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          INSERT INTO users (email, name, role) VALUES ('admin@bizbox.local', 'Super Admin', 'super_admin') ON CONFLICT DO NOTHING;
        \" &&
        echo 'Migration completed successfully!'
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bizbox-network
    restart: "no"
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-migration
      - coolify.type=job

  # Landing Page Application
  landing:
    image: node:20-alpine
    restart: unless-stopped
    working_dir: /app
    command: >
      sh -c "
        echo 'Setting up BizBox Landing Page...' &&
        npm install -g serve &&
        mkdir -p /app &&
        echo '<!DOCTYPE html>
        <html lang=\"en\">
        <head>
          <meta charset=\"UTF-8\">
          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
          <title>BizBox - Business in a Box</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 40px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 20px rgba(0,0,0,0.1); }
            h1 { color: #333; text-align: center; margin-bottom: 30px; }
            .status { background: #e8f5e8; padding: 20px; border-radius: 5px; margin: 20px 0; }
            .links { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 30px; }
            .link { background: #007acc; color: white; padding: 15px; text-decoration: none; border-radius: 5px; text-align: center; transition: background 0.3s; }
            .link:hover { background: #005fa3; }
          </style>
        </head>
        <body>
          <div class=\"container\">
            <h1>ðŸš€ BizBox Multi-Tenant SaaS Platform</h1>
            <div class=\"status\">
              âœ… Landing page is running successfully on port 3001
            </div>
            <p>Welcome to BizBox - your complete business-in-a-box solution for multi-tenant SaaS applications.</p>
            <div class=\"links\">
              <a href=\"http://194.164.89.92:3002\" class=\"link\">Admin Dashboard</a>
              <a href=\"http://194.164.89.92:3003\" class=\"link\">Website Builder</a>
              <a href=\"http://194.164.89.92:3004\" class=\"link\">Customer Portal</a>
              <a href=\"http://194.164.89.92:3005\" class=\"link\">Tenant Sites</a>
              <a href=\"http://194.164.89.92:3006\" class=\"link\">Super Admin</a>
            </div>
          </div>
        </body>
        </html>' > /app/index.html &&
        serve -s /app -l 3000
      "
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: http://194.164.89.92:3001
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      PORT: 3000
    ports:
      - "3001:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-landing
      - coolify.type=application

  # Admin Dashboard Application
  admin:
    build:
      context: .
      dockerfile: Dockerfile
      target: admin-app
      args:
        NODE_ENV: production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: http://194.164.89.92:3002
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      SUPER_ADMIN_PASSWORD: ${SUPER_ADMIN_PASSWORD}
      PORT: 3000
    ports:
      - "3002:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-admin
      - coolify.type=application

  # Website Builder Application
  builder:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder-app
      args:
        NODE_ENV: production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: http://194.164.89.92:3003
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      PORT: 3000
    ports:
      - "3003:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-builder
      - coolify.type=application

  # Customer Dashboard Application
  customer:
    build:
      context: .
      dockerfile: Dockerfile
      target: customer-app
      args:
        NODE_ENV: production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: http://194.164.89.92:3004
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      PORT: 3000
    ports:
      - "3004:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-customer
      - coolify.type=application

  # Multi-tenant Website Renderer
  tenant:
    build:
      context: .
      dockerfile: Dockerfile
      target: tenant-app
      args:
        NODE_ENV: production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      TENANT_MODE: multi
      BASE_URL: http://194.164.89.92:3005
      PORT: 3000
    ports:
      - "3005:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-tenant
      - coolify.type=application

  # Super Admin Application
  super-admin:
    build:
      context: .
      dockerfile: Dockerfile
      target: super-admin-app
      args:
        NODE_ENV: production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: http://194.164.89.92:3006
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      SUPER_ADMIN_PASSWORD: ${SUPER_ADMIN_PASSWORD}
      PORT: 3000
    ports:
      - "3006:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-super-admin
      - coolify.type=application

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  bizbox-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Coolify-specific configuration
x-coolify:
  deployment:
    server: "194.164.89.92"
    project: "bizbox-saas"
    environment: "production"
    
  monitoring:
    enabled: true
    metrics:
      - cpu
      - memory
      - disk
      - network
    healthchecks:
      enabled: true
      interval: 60s
      timeout: 30s
      retries: 3
    alerts:
      - type: webhook
        threshold: 80
        
  backups:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM UTC
    retention: 30
    targets:
      - postgres_data
      - redis_data
      
  security:
    firewall:
      enabled: true
      rules:
        - port: 3001
          protocol: tcp
          action: allow
        - port: 3002
          protocol: tcp
          action: allow
        - port: 3003
          protocol: tcp
          action: allow
        - port: 3004
          protocol: tcp
          action: allow
        - port: 3005
          protocol: tcp
          action: allow
        - port: 3006
          protocol: tcp
          action: allow
        - port: 22
          protocol: tcp
          action: allow
          source: management
    
  scaling:
    auto: false
    min_replicas: 1
    max_replicas: 3
    target_cpu: 70
    target_memory: 80