# BizBox Multi-Tenant SaaS Platform - Coolify Production Deployment
# Target: http://194.164.89.92/
# Using nip.io for automatic domain resolution without DNS setup

version: "3.8"

services:
  # PostgreSQL Database with optimized configuration
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: bizbox
      POSTGRES_USER: bizbox_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/core/database/setup-database.sql:/docker-entrypoint-initdb.d/01-setup.sql
    networks:
      - bizbox-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bizbox_user -d bizbox"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-postgres
      - coolify.type=database

  # Redis Cache with persistence
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - bizbox-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-redis
      - coolify.type=cache

  # Database Migration Job
  migration:
    build:
      context: .
      dockerfile: Dockerfile.migration
    environment:
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: bizbox
      DB_USER: bizbox_user
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bizbox-network
    restart: "no"
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-migration
      - coolify.type=job

  # Landing Page Application
  landing:
    build:
      context: .
      dockerfile: apps/landing/Dockerfile
      cache_from:
        - node:20-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: http://194.164.89.92:3001
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      PORT: 3000
    ports:
      - "3001:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-landing
      - coolify.type=application

  # Admin Dashboard Application
  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile
      cache_from:
        - node:20-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: http://194.164.89.92:3002
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      SUPER_ADMIN_PASSWORD: ${SUPER_ADMIN_PASSWORD}
      PORT: 3000
    ports:
      - "3002:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-admin
      - coolify.type=application

  # Website Builder Application
  builder:
    build:
      context: .
      dockerfile: apps/builder/Dockerfile
      cache_from:
        - node:20-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: http://194.164.89.92:3003
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      PORT: 3000
    ports:
      - "3003:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-builder
      - coolify.type=application

  # Customer Dashboard Application
  customer:
    build:
      context: .
      dockerfile: apps/customer/Dockerfile
      cache_from:
        - node:20-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: http://194.164.89.92:3004
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      PORT: 3000
    ports:
      - "3004:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-customer
      - coolify.type=application

  # Multi-tenant Website Renderer
  tenant:
    build:
      context: .
      dockerfile: apps/tenant/Dockerfile
      cache_from:
        - node:20-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      TENANT_MODE: multi
      BASE_URL: http://194.164.89.92:3005
      PORT: 3000
    ports:
      - "3005:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-tenant
      - coolify.type=application

  # Super Admin Application
  super-admin:
    build:
      context: .
      dockerfile: apps/super-admin/Dockerfile
      cache_from:
        - node:20-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bizbox_user:${DB_PASSWORD}@postgres:5432/bizbox
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: http://194.164.89.92:3006
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      SUPER_ADMIN_PASSWORD: ${SUPER_ADMIN_PASSWORD}
      PORT: 3000
    ports:
      - "3006:3000"
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - bizbox-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - coolify.managed=true
      - coolify.name=bizbox-super-admin
      - coolify.type=application

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  bizbox-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Coolify-specific configuration
x-coolify:
  deployment:
    server: "194.164.89.92"
    project: "bizbox-saas"
    environment: "production"
    
  monitoring:
    enabled: true
    metrics:
      - cpu
      - memory
      - disk
      - network
    healthchecks:
      enabled: true
      interval: 60s
      timeout: 30s
      retries: 3
    alerts:
      - type: webhook
        threshold: 80
        
  backups:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM UTC
    retention: 30
    targets:
      - postgres_data
      - redis_data
      
  security:
    firewall:
      enabled: true
      rules:
        - port: 3001
          protocol: tcp
          action: allow
        - port: 3002
          protocol: tcp
          action: allow
        - port: 3003
          protocol: tcp
          action: allow
        - port: 3004
          protocol: tcp
          action: allow
        - port: 3005
          protocol: tcp
          action: allow
        - port: 3006
          protocol: tcp
          action: allow
        - port: 22
          protocol: tcp
          action: allow
          source: management
    
  scaling:
    auto: false
    min_replicas: 1
    max_replicas: 3
    target_cpu: 70
    target_memory: 80