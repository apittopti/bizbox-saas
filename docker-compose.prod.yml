# BizBox Platform - Production Environment for Coolify
# Optimized for production deployment with proper scaling and security

version: '3.8'

x-app-common: &app-common
  restart: unless-stopped
  networks:
    - bizbox-network
  environment: &app-env
    NODE_ENV: production
    DATABASE_URL: ${DATABASE_URL}
    REDIS_URL: ${REDIS_URL}
    NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
    STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
    STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    AWS_REGION: ${AWS_REGION}
    AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    SMTP_HOST: ${SMTP_HOST}
    SMTP_PORT: ${SMTP_PORT}
    SMTP_USER: ${SMTP_USER}
    SMTP_PASSWORD: ${SMTP_PASSWORD}
    MONITORING_ENABLED: ${MONITORING_ENABLED:-true}
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 60s
  deploy:
    resources:
      limits:
        memory: 1G
        cpus: '0.5'
      reservations:
        memory: 512M
        cpus: '0.25'

services:
  # =============================================================================
  # DATABASE AND CACHE SERVICES
  # =============================================================================
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bizbox}
      POSTGRES_USER: ${POSTGRES_USER:-bizbox}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - postgres_backups:/backups:Z
    networks:
      - bizbox-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bizbox} -d ${POSTGRES_DB:-bizbox}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    labels:
      - "coolify.managed=true"
      - "coolify.type=database"
      - "coolify.name=bizbox-postgres"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data:Z
    networks:
      - bizbox-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    labels:
      - "coolify.managed=true"
      - "coolify.type=database"
      - "coolify.name=bizbox-redis"

  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================
  
  # Landing Page Application
  landing:
    <<: *app-common
    build:
      context: .
      target: landing-app
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    environment:
      <<: *app-env
      NEXTAUTH_URL: ${LANDING_URL}
      APP_NAME: landing
    ports:
      - "${LANDING_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=bizbox-landing"
      - "coolify.fqdn=${LANDING_DOMAIN}"
      - "traefik.enable=true"
      - "traefik.http.routers.landing.rule=Host(`${LANDING_DOMAIN}`)"
      - "traefik.http.routers.landing.tls.certresolver=letsencrypt"

  # Admin Dashboard
  admin:
    <<: *app-common
    build:
      context: .
      target: admin-app
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    environment:
      <<: *app-env
      NEXTAUTH_URL: ${ADMIN_URL}
      APP_NAME: admin
    ports:
      - "${ADMIN_PORT:-3001}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=bizbox-admin"
      - "coolify.fqdn=${ADMIN_DOMAIN}"
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`${ADMIN_DOMAIN}`)"
      - "traefik.http.routers.admin.tls.certresolver=letsencrypt"

  # Website Builder
  builder:
    <<: *app-common
    build:
      context: .
      target: builder-app
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    environment:
      <<: *app-env
      NEXTAUTH_URL: ${BUILDER_URL}
      APP_NAME: builder
    ports:
      - "${BUILDER_PORT:-3002}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=bizbox-builder"
      - "coolify.fqdn=${BUILDER_DOMAIN}"
      - "traefik.enable=true"
      - "traefik.http.routers.builder.rule=Host(`${BUILDER_DOMAIN}`)"
      - "traefik.http.routers.builder.tls.certresolver=letsencrypt"

  # Customer Application
  customer:
    <<: *app-common
    build:
      context: .
      target: customer-app
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    environment:
      <<: *app-env
      NEXTAUTH_URL: ${CUSTOMER_URL}
      APP_NAME: customer
    ports:
      - "${CUSTOMER_PORT:-3003}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=bizbox-customer"
      - "coolify.fqdn=${CUSTOMER_DOMAIN}"
      - "traefik.enable=true"
      - "traefik.http.routers.customer.rule=Host(`${CUSTOMER_DOMAIN}`)"
      - "traefik.http.routers.customer.tls.certresolver=letsencrypt"

  # Tenant Application (Multi-tenant websites)
  tenant:
    <<: *app-common
    build:
      context: .
      target: tenant-app
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    environment:
      <<: *app-env
      APP_NAME: tenant
      TENANT_MODE: multi
    ports:
      - "${TENANT_PORT:-3004}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=bizbox-tenant"
      - "coolify.fqdn=*.${TENANT_DOMAIN}"
      - "traefik.enable=true"
      - "traefik.http.routers.tenant.rule=HostRegexp(`{subdomain:[a-z0-9-]+}.${TENANT_DOMAIN}`)"
      - "traefik.http.routers.tenant.tls.certresolver=letsencrypt"

  # Super Admin Application
  super-admin:
    <<: *app-common
    build:
      context: .
      target: super-admin-app
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    environment:
      <<: *app-env
      NEXTAUTH_URL: ${SUPER_ADMIN_URL}
      APP_NAME: super-admin
    ports:
      - "${SUPER_ADMIN_PORT:-3005}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=bizbox-super-admin"
      - "coolify.fqdn=${SUPER_ADMIN_DOMAIN}"
      - "traefik.enable=true"
      - "traefik.http.routers.super-admin.rule=Host(`${SUPER_ADMIN_DOMAIN}`)"
      - "traefik.http.routers.super-admin.tls.certresolver=letsencrypt"

  # =============================================================================
  # MONITORING AND UTILITIES
  # =============================================================================
  
  # Database backup service
  postgres-backup:
    image: prodrigestivill/postgres-backup-local:16
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-bizbox}
      POSTGRES_USER: ${POSTGRES_USER:-bizbox}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
      HEALTHCHECK_PORT: 8080
    volumes:
      - postgres_backups:/backups:Z
    networks:
      - bizbox-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backup
    labels:
      - "coolify.managed=true"
      - "coolify.type=utility"
      - "coolify.name=bizbox-backup"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH:-./backups}/postgres

networks:
  bizbox-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16